on:
  workflow_call:
    inputs:
      source-repo:
        required: false
        type: string
        default: ${{ github.repository }}
        description: "Repository containing the workflow run with artifacts"
      source-workflow-run-id:
        required: false  
        type: string
        description: "Specific workflow run ID to download artifacts from. If not provided, will use the latest successful run from main branch"
      source-workflow-name:
        required: false
        type: string
        default: "ci-dotnet.yml"
        description: "Name of the workflow to check for successful builds"
      artifact-name:
        required: false
        type: string
        default: "release-packages"
        description: "Name of the artifact to download"
      environment:
        required: false
        type: string
        default: "nuget-production"
        description: "Environment name for manual approval (must be configured in repository settings)"
    secrets:
      NUGET_TOKEN:
        required: true
      GITHUB_TOKEN:
        required: false

jobs:
  verify-build-status:
    name: Verify Build Status
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    outputs:
      workflow-run-id: ${{ steps.get-run-id.outputs.run-id }}
      workflow-conclusion: ${{ steps.get-run-id.outputs.conclusion }}
      
    steps:
    - name: Get Latest Successful Build Run ID
      id: get-run-id
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
        script: |
          const workflowRunId = '${{ inputs.source-workflow-run-id }}';
          
          if (workflowRunId) {
            // Use specific workflow run ID if provided
            console.log(`Using specified workflow run ID: ${workflowRunId}`);
            
            const runResponse = await github.rest.actions.getWorkflowRun({
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}',
              run_id: parseInt(workflowRunId)
            });
            
            core.setOutput('run-id', workflowRunId);
            core.setOutput('conclusion', runResponse.data.conclusion);
            
            if (runResponse.data.conclusion !== 'success') {
              core.setFailed(`Specified workflow run ${workflowRunId} was not successful. Status: ${runResponse.data.conclusion}`);
            }
            
            return;
          }
          
          // Get latest successful workflow run from main branch
          const workflowName = '${{ inputs.source-workflow-name }}';
          console.log(`Looking for latest successful run of workflow: ${workflowName}`);
          
          const workflowsResponse = await github.rest.actions.listRepoWorkflows({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}'
          });
          
          const workflow = workflowsResponse.data.workflows.find(w => 
            w.name === workflowName || w.path.includes(workflowName)
          );
          
          if (!workflow) {
            core.setFailed(`Workflow '${workflowName}' not found in repository`);
            return;
          }
          
          const runsResponse = await github.rest.actions.listWorkflowRuns({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            workflow_id: workflow.id,
            branch: 'main',
            status: 'success',
            per_page: 1
          });
          
          if (runsResponse.data.workflow_runs.length === 0) {
            core.setFailed(`No successful workflow runs found for '${workflowName}' on main branch`);
            return;
          }
          
          const latestRun = runsResponse.data.workflow_runs[0];
          console.log(`Found successful run: ${latestRun.id} from ${latestRun.created_at}`);
          
          core.setOutput('run-id', latestRun.id.toString());
          core.setOutput('conclusion', latestRun.conclusion);

  publish-nuget:
    name: Publish NuGet Packages
    needs: verify-build-status
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ needs.verify-build-status.outputs.workflow-conclusion == 'success' }}
    permissions:
      contents: read
      actions: read

    steps:
    - name: Download Artifacts from Workflow Run
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN || github.token }}
        script: |
          const fs = require('fs');
          
          const runId = '${{ needs.verify-build-status.outputs.workflow-run-id }}';
          const artifactName = '${{ inputs.artifact-name }}';
          
          console.log(`Downloading artifact '${artifactName}' from run ${runId}`);
          
          // List artifacts for the workflow run
          const artifactsResponse = await github.rest.actions.listWorkflowRunArtifacts({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            run_id: parseInt(runId)
          });
          
          const artifact = artifactsResponse.data.artifacts.find(a => a.name === artifactName);
          
          if (!artifact) {
            core.setFailed(`Artifact '${artifactName}' not found in workflow run ${runId}`);
            return;
          }
          
          if (artifact.expired) {
            core.setFailed(`Artifact '${artifactName}' has expired`);
            return;
          }
          
          console.log(`Found artifact: ${artifact.id}`);
          
          // Download the artifact
          const downloadResponse = await github.rest.actions.downloadArtifact({
            owner: '${{ github.repository_owner }}',
            repo: '${{ github.event.repository.name }}',
            artifact_id: artifact.id,
            archive_format: 'zip'
          });
          
          // Save the artifact zip file
          fs.writeFileSync('artifact.zip', Buffer.from(downloadResponse.data));
          console.log('Artifact downloaded successfully');

    - name: Extract Artifacts
      run: |
        mkdir -p packages
        unzip -q artifact.zip -d packages
        ls -la packages/
        
    - name: Verify NuGet Packages
      run: |
        if [ ! "$(find packages -name '*.nupkg' -type f)" ]; then
          echo "ERROR: No .nupkg files found in downloaded artifacts"
          exit 1
        fi
        
        echo "Found NuGet packages:"
        find packages -name '*.nupkg' -type f
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: '8.x'
        dotnet-quality: 'ga'

    - name: Push packages to nuget.org
      run: |
        echo "Publishing NuGet packages to nuget.org..."
        dotnet nuget push packages/**/*.nupkg \
          -k ${{ secrets.NUGET_TOKEN }} \
          -s https://api.nuget.org/v3/index.json \
          --skip-duplicate \
          --no-symbols
        
        echo "NuGet packages published successfully!"