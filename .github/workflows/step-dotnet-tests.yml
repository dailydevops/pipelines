on:
  workflow_call:
    inputs:
      enableSonarQube:
        required: false
        type: boolean
        default: false
      enableCleanUpDockerDocker:
        required: false
        type: boolean
        default: false
      disableCoverageUpload:
        required: false
        type: boolean
        default: false
      dotnet-logging:
        required: false
        type: string
        default: quiet
      dotnet-version:
        required: false
        type: string
        default: 8.x
      dotnet-quality:
        required: false
        type: string
        default: ga
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      solution:
        required: true
        type: string
      solution-version:
        required: true
        type: string
      retry-max-attempts:
        required: false
        type: number
        default: 3
      retry-timeout:
        required: false
        type: number
        default: 15
    secrets:
      CODECOV_TOKEN:
        required: false
      SONAR_ORGANIZATION:
        required: false
      SONAR_PROJECT:
        required: false
      SONAR_TOKEN:
        required: false
      FETCH_TOKEN:
        required: false

jobs:
  testing:
    name: Testing .NET solution
    runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
    env:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5.0.0
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.FETCH_TOKEN || github.token }}

    # Our modules occupy too much disk space. The GitHub-hosted runners ran into the
    # error: "no space left on device." The pulled images are not cleaned up between
    # the test runs. One obvious approach is splitting the tests and running them on
    # multiple runners. However, we need to keep in mind that running too many
    # simultaneous builds has an impact on others as well. We observed that scheduled
    # Dependabot builds blocked others in the Testcontainers organization.
    - name: Free Disk Space - Docker Images
      uses: jlumbroso/free-disk-space@v1.3.1
      if: ${{ inputs.enableCleanUpDockerDocker == true && runner.os == 'Linux' }}
      with:
        android: true
        haskell: true
        dotnet: false
        large-packages: false
        tool-cache: false
        swap-storage: false
        docker-images: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solution }} -v ${{ inputs.dotnet-logging }}

    - name: Build
      run: dotnet build ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging || 'minimal' }} --no-restore /p:GeneratePackageOnBuild=false

    - name: Test
      id: test
      run: |
        dotnet test ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging || 'minimal' }} --no-build --no-restore --collect:"XPlat Code Coverage;Format=cobertura,opencover" /p:GeneratePackageOnBuild=false -- --coverage --coverage-output-format cobertura

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.9
      with:
        reports: '${{ github.workspace }}/**/TestResults/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/coveragereports'
        reporttypes: 'Cobertura;MarkdownSummaryGithub'

    - name: Upload coverage into summary
      # Only on non windows runners
      if: ${{ runner.os != 'Windows' }}
      run: |
        cat $GITHUB_WORKSPACE/coveragereports/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

    - name: Update codecov
      uses: codecov/codecov-action@v5.4.3
      if: ${{ env.codecov_token != '' && (success() || steps.test.conclusion == 'failure' || steps.sonar.conclusion == 'skipped' ) }}
      with:
        token: ${{ env.codecov_token }}
        fail_ci_if_error: true
        files: ${{ github.workspace }}/coveragereports/Cobertura.xml

    - name: Upload ReportGenerator
      uses: actions/upload-artifact@v4.6.2
      if: always()
      with:
        name: reportgenerator-${{ inputs.runs-on || 'ubuntu-latest' }}-${{ inputs.solution }}
        path: |
          ${{ github.workspace }}/coveragereports/**/*.*

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4.6.2
      if: ${{ inputs.disableCoverageUpload == false }}
      with:
        name: coverage-${{ inputs.runs-on || 'ubuntu-latest' }}-${{ inputs.solution }}
        path: |
          **/TestResults/**/*.opencover.xml
          **/TestResults/**/*.cobertura.xml

    - name: Upload log files
      uses: actions/upload-artifact@v4.6.2
      if: ${{ always() }}
      with:
        name: logs-${{ inputs.runs-on || 'ubuntu-latest' }}-${{ inputs.solution }}
        if-no-files-found: ignore
        path: |
          **/TestResults/**/*.log
          **/*.sarif
